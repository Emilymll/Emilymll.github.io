<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nampu</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-22T12:08:42.531Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Nampu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django学习笔记</title>
    <link href="http://example.com/2024/10/22/Django/"/>
    <id>http://example.com/2024/10/22/Django/</id>
    <published>2024-10-21T16:00:00.000Z</published>
    <updated>2024-10-22T12:08:42.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Django 本身基于 MVC 的设计模式。</p><p>安装：<code>pip install Django</code> ，测试是否安装成功：<code>python -m django --version</code> 。</p><h1 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>使用 django-admin 来创建 HelloWorld 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject HelloWorld</span><br></pre></td></tr></table></figure><p>目录说明：</p><ul><li><p><strong>HelloWorld:</strong> 项目的容器。</p></li><li><p><strong>manage.py:</strong> 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</p></li><li><p><strong>HelloWorld&#x2F;<strong>init</strong>.py:</strong> 一个空文件，告诉 Python 该目录是一个 Python 包。</p></li><li><p><strong>HelloWorld&#x2F;asgi.py:</strong> 一个 ASGI 兼容的 Web 服务器的入口，以便运行你的项目。</p><blockquote><p><strong>一、什么是 ASGI？</strong></p><p>ASGI（Asynchronous Server Gateway Interface，异步服务器网关接口）是为 Python 网络框架设计的一种标准接口，用于支持异步并发编程。它是 WSGI（Web Server Gateway Interface，Web 服务器网关接口）的异步版本，旨在支持 WebSockets 等长连接协议和高并发应用场景。</p><p>ASGI 的主要特点：</p><ol><li>异步支持：ASGI 能处理异步 I&#x2F;O 操作，这意味着它能高效处理并发请求，尤其是在处理长连接（如 WebSockets）或需要异步数据库查询时。</li><li>双向通信：ASGI 支持 WebSockets，允许客户端和服务器之间的双向通信。</li><li>灵活性：ASGI 不仅支持 HTTP 协议，还能处理其他协议（如 WebSockets）。这是 WSGI 所不具备的。</li><li>可扩展性：与 WSGI 相比，ASGI 能更好地应对现代 Web 应用的需求，尤其是在涉及实时通信和大量并发时。</li></ol><p>ASGI 主要用于像 FastAPI、Django Channels 等支持异步的 Python 框架。</p><p>Django Channels 是一个扩展 Django 框架的项目，旨在为 Django 提供对 WebSockets、长连接、异步任务和其他协议的支持。Django 本身是基于 WSGI 的同步框架（但是 Django 从 3.0 版本开始就原生支持 ASGI），而 Channels 通过引入 ASGI 来增加对异步编程和双向通信的支持。</p><p>Flask 本身并不原生支持 ASGI ，因为 Flask 是基于 WSGI 的同步 Web 框架，它的设计初衷就是为了处理同步的 HTTP 请求和响应循环。然而可以通过一些第三方工具和库将 Flask 与 ASGI 集成起来。</p><p><strong>二、什么是 WSGI？</strong></p><p>WSGI（Web Server Gateway Interface，Web 服务器网关接口）是 Python 中的一个标准接口，用于 Web 应用和 Web 服务器之间的通信。它是 Python Web 开发的标准协议，旨在使应用和服务器的连接更加通用、简洁。</p><p>WSGI 的主要特点：</p><ol><li>同步编程：WSGI 是为同步编程模型设计的。它每次只能处理一个请求，完成后才处理下一个，因此适合处理简单的 HTTP 请求-响应模型。</li><li>请求-响应循环：WSGI 主要用于 HTTP 协议的请求-响应通信，无法原生处理 WebSockets 等需要双向通信的协议。</li><li>服务器与框架分离：WSGI 将 Web 服务器和 Web 应用解耦，这意味着 Web 应用只需遵循 WSGI 规范，就可以部署在任何兼容的 WSGI 服务器上。</li></ol><p>WSGI 在 Python Web 开发中的地位十分重要，Django、Flask 等经典 Web 框架都依赖于 WSGI。</p></blockquote></li><li><p><strong>HelloWorld&#x2F;settings.py:</strong> 该 Django 项目的设置&#x2F;配置。</p></li><li><p><strong>HelloWorld&#x2F;urls.py:</strong> 该 Django 项目的 URL 声明；一份由 Django 驱动的网站”目录”。</p></li><li><p><strong>HelloWorld&#x2F;wsgi.py:</strong> 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</p></li></ul><p>接下来输入以下命令，启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>浏览器输入 <code>127.0.0.1:8000</code> 即可。</p><h2 id="视图和URL配置"><a href="#视图和URL配置" class="headerlink" title="视图和URL配置"></a>视图和URL配置</h2><p>在先前创建的 HelloWorld&#x2F;HelloWorld 目录新建一个 views.py 文件，并输入代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>接着，绑定 URL 与视图函数。打开 urls.py 文件，删除原来代码，将以下代码复制粘贴到 urls.py 文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问 <code>127.0.0.1:8000/hello/</code> 。</p><h2 id="path-函数"><a href="#path-函数" class="headerlink" title="path()函数"></a>path()函数</h2><p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(route, view, kwargs=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>route：</strong> 字符串，定义 URL 的路径部分。</li><li><strong>view：</strong> 视图函数，处理与给定路由匹配的请求。</li><li><strong>kwargs（可选）：</strong> 一个字典，包含传递给视图函数的额外关键字参数。</li><li><strong>name（可选）：</strong> 为 URL 路由指定一个唯一的名称，以便在代码的其他地方引用它。</li></ul><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>在上文中我们使用 django.http.HttpResponse() 来输出 “Hello World”。该方式将数据与视图混合在一起，不符合 Django 的 MVC 思想。</p><p>我们改为使用 Django 模板，模板是一个文本，用于分离文档的表现形式和内容。</p><h2 id="应用示例"><a href="#应用示例" class="headerlink" title="应用示例"></a>应用示例</h2><p>建立与 HelloWorld 同级的目录 templates ，在该目录下建立 test.html 文件，写入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; hello &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们需要向 Django 说明模板文件的路径，修改 HelloWorld&#x2F;settings.py ，修改 TEMPLATES 中的 DIRS 为 **[os.path.join(BASE_DIR, ‘templates’)]**，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os<span class="comment"># 别忘了</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],       <span class="comment"># 修改位置</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们现在修改 views.py，用于向模板提交数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    context = &#123;&#125;</span><br><span class="line">    context[<span class="string">&#x27;hello&#x27;</span>] = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;runoob.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><p>这样我们就完成了使用模板来输出数据，从而实现数据与视图分离。</p><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view：｛&quot;HTML变量名&quot; : views变量名｝</span><br><span class="line">HTML：｛｛变量名｝｝</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">  views_name = <span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">  <span class="keyword">return</span>  render(request,<span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>:views_name&#125;)</span><br></pre></td></tr></table></figure><p>templates 中的 runoob.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>templates 中的 runoob.html 中，可以用 <strong>.</strong> 索引下标取出对应的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    views_list = [<span class="string">&quot;菜鸟教程1&quot;</span>,<span class="string">&quot;菜鸟教程2&quot;</span>,<span class="string">&quot;菜鸟教程3&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;views_list&quot;</span>: views_list&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; views_list &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>   # 取出整个列表</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; views_list.0 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> # 取出列表的第一个元素</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>templates 中的 runoob.html 中，可以用 <strong>.键</strong> 取出对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    views_dict = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;views_dict&quot;</span>: views_dict&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; views_dict &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; views_dict.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 变量名 | 过滤器:可选参数 &#125;&#125;</span><br></pre></td></tr></table></figure><p>模板过滤器可以在变量被显示前修改它，过滤器使用管道字符，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|lower &#125;&#125;</span><br></pre></td></tr></table></figure> 变量被过滤器 lower 处理后，文档大写转换文本为小写。<p>过滤管道可以被套接，既是说，一个过滤器管道的输出又可以作为下一个管道的输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; my_list|first|upper &#125;&#125;</span><br></pre></td></tr></table></figure><p>以上实例将第一个元素并将其转化为大写。</p><p>有些过滤器有参数。过滤器的参数跟随冒号之后并且总是以双引号包含。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>这个将显示变量 bio 的前 30 个词。</p><p>其他过滤器：</p><ul><li>addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面。</li><li>length : 返回变量的长度。</li></ul><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>default 为变量指定一个默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|default:&quot;XXX&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>当然有默认的默认值，如布尔型变量的默认值是 False 。以下是默认的默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  0.0  False  &quot;&quot;  []  ()  set()  &#123;&#125;  None</span><br></pre></td></tr></table></figure><h4 id="filesizeformat"><a href="#filesizeformat" class="headerlink" title="filesizeformat"></a>filesizeformat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; num|filesizeformat&#125;&#125;</span><br></pre></td></tr></table></figure><p>以更易读的方式显示文件的大小（即’13 KB’, ‘4.1 MB’, ‘102 bytes’等）。</p><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>根据给定格式对一个日期变量进行格式化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; time|date:&quot;Y-m-d&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>格式 <strong>Y-m-d H:i:s</strong> 返回 <strong>年-月-日 小时:分钟:秒</strong> 的格式时间。</p><h4 id="safe"><a href="#safe" class="headerlink" title="safe"></a>safe</h4><p>将字符串标记为安全，不需要转义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; views_str|safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>要保证 views.py 传过来的数据绝对安全，才能用 safe。</p><p>和后端 views.py 的 mark_safe 效果相同。</p><p>Django 会自动对 views.py 传到HTML文件中的标签语法进行转义，令其语义失效。加 safe 过滤器是告诉 Django 该数据是安全的，不必对其进行转义，可以让该数据语义生效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    views_str = <span class="string">&quot;&lt;a href=&#x27;https://www.runoob.com/&#x27;&gt;点击跳转&lt;/a&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;views_str&quot;</span>: views_str&#125;)</span><br></pre></td></tr></table></figure><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition1 %&#125;</span><br><span class="line">   ... display 1</span><br><span class="line">&#123;% elif condition2 %&#125;</span><br><span class="line">   ... display 2</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">   ... display 3</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>正向迭代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in views_list %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>反向迭代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i in views_list  reversed%&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p>可以直接用字典 <strong>.items</strong> 方法，用变量的解包分别获取键和值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    views_dict = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;views_dict&quot;</span>: views_dict&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for i,j in views_dict.items %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;---&#123;&#123; j &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 这是一个注释 #&#125;</span><br></pre></td></tr></table></figure><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><p>在模板中包含其它的模板的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &quot;nav.html&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义标签和过滤器"><a href="#自定义标签和过滤器" class="headerlink" title="自定义标签和过滤器"></a>自定义标签和过滤器</h3><p>1、创建 templatetags 目录（与 templates 目录同级，目录名只能是 templatetags）。</p><p>2、在 templatetags 目录下创建任意 py 文件，如：my_tags.py。</p><p>3、my_tags.py 文件代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()   <span class="comment">#register的名字是固定的,不可改变</span></span><br></pre></td></tr></table></figure><p>修改 settings.py 文件的 TEMPLATES 选项配置，添加 libraries 配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR, <span class="string">&quot;/templates&quot;</span>,],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;libraries&quot;</span>:&#123;                          <span class="comment"># 添加这边三行配置</span></span><br><span class="line">                <span class="string">&#x27;my_tags&#x27;</span>:<span class="string">&#x27;templatetags.my_tags&#x27;</span>   <span class="comment"># 添加这边三行配置        </span></span><br><span class="line">            &#125;                                      <span class="comment"># 添加这边三行配置</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4、利用装饰器 @register.filter 自定义过滤器。</p><p><strong>注意：</strong>装饰器的参数最多只能有 2 个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_filter</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    <span class="keyword">return</span> v1 * v2</span><br></pre></td></tr></table></figure><p>5、利用装饰器 @register.simple_tag 自定义标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_tag1</span>(<span class="params">v1, v2, v3</span>):</span><br><span class="line">    <span class="keyword">return</span> v1 * v2 * v3</span><br></pre></td></tr></table></figure><p>6、在使用自定义标签和过滤器前，要在 html 文件 body 的最上方中导入该 py 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load my_tags %&#125;</span><br></pre></td></tr></table></figure><p>7、在 HTML 中使用自定义过滤器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 11|my_filter:22 &#125;&#125;</span><br></pre></td></tr></table></figure><p>注意 11 和 22 分别对应 v1 和 v2 的参数值，view 部分只需：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;test.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>8、在 HTML 中使用自定义标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% my_tag1 11 22 33 %&#125;</span><br></pre></td></tr></table></figure><p>与 my_filter 同理。</p><p>9、语义化标签</p><p>在该 py 文件中导入 mark_safe。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br></pre></td></tr></table></figure><p>定义标签时，用上 mark_safe 方法，令标签语义化。和前端 HTML 文件中的过滤器 safe 效果一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_html</span>(<span class="params">v1, v2</span>):</span><br><span class="line">    temp_html = <span class="string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; class=&#x27;%s&#x27; /&gt;&quot;</span> %(v1, v2)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(temp_html)</span><br></pre></td></tr></table></figure><p>在HTML中使用该自定义标签，在页面中动态创建标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% my_html &quot;zzz&quot; &quot;xxx&quot; %&#125;</span><br></pre></td></tr></table></figure><h3 id="配置静态文件"><a href="#配置静态文件" class="headerlink" title="配置静态文件"></a>配置静态文件</h3><p>1、在项目根目录下创建 statics 目录。</p><p>2、在 settings 文件的最下方配置添加以下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span> <span class="comment"># 别名 </span></span><br><span class="line">STATICFILES_DIRS = [ </span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;statics&quot;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录，分别放 css 文件，js 文件，图片，插件。</p><p><strong>注意：</strong>此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/plugins/bootstrap-3.3.7/dist/css/bootstrap.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模板中使用需要加入 <code>&#123;% load static %&#125;</code> 代码，以下实例我们从静态目录中引入图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    name =<span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>: name&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line">&#123;&#123;name&#125;&#125;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/runoob-logo.png&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>模板可以用继承的方式来实现复用，减少冗余内容。</p><p>网页的头部和尾部内容一般都是一致的，我们就可以通过模板继承来实现复用。</p><p>父模板用于放置可重复利用的内容，子模板继承父模板的内容，并放置自己的内容。</p><h4 id="父模板"><a href="#父模板" class="headerlink" title="父模板"></a>父模板</h4><p>标签 block…endblock：父模板中的预留区域，该区域留给子模板填充差异性的内容，不同预留区域名字不能相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block 名称 %&#125; </span><br><span class="line">预留给子模板的区域，可以设置默认内容</span><br><span class="line">&#123;% endblock 名称 %&#125;</span><br></pre></td></tr></table></figure><h4 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h4><p>子模板使用标签 extends 继承父模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;父模板路径&quot;%&#125; </span><br></pre></td></tr></table></figure><p>子模板如果没有设置父模板预留区域的内容，则使用在父模板设置的默认内容，当然也可以都不设置，就为空。</p><p>子模板设置父模板预留区域的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;父模板路径&quot;%&#125; </span><br><span class="line">&#123; % block 名称 % &#125;</span><br><span class="line">子模板内容 </span><br><span class="line">&#123;% endblock 名称 %&#125;</span><br></pre></td></tr></table></figure><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>Django 模型使用自带的 ORM。</p><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p><p>使用 ORM 的好处：</p><ul><li>提高开发效率。</li><li>不同数据库可以平滑切换。</li></ul><p>使用 ORM 的缺点：</p><ul><li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li></ul><p>ORM 解析过程:</p><ul><li>1、ORM 会将 Python 代码转成为 SQL 语句。</li><li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li><li>3、在数据库中执行 SQL 语句并将结果返回。</li></ul><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>在项目的 settings.py 文件中找到 DATABASES 配置项，将其信息修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,    <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="comment"># 数据库名称</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment"># 数据库地址，本机 ip 地址 127.0.0.1 </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>, <span class="comment"># 端口 </span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，告诉 Django 使用 pymysql 模块连接 mysql 数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p>Django 规定，如果要使用模型，必须要创建一个 app。我们使用以下命令创建一个 TestModel 的 app:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp TestModel</span><br></pre></td></tr></table></figure><p>将创建一个与 HelloWorld 同级的包。</p><p>我们修改 TestModel&#x2F;models.py 文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>以上的类名代表了数据库表名，且继承了 models.Model，类里面的字段代表数据表中的字段（name），数据类型为 CharField（相当于varchar）， max_length 参数限定长度。</p><p>接下来在 settings.py 中找到 INSTALLED_APPS 这一项，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TestModel&#x27;</span>,               <span class="comment"># 添加此项</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在命令行中运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations TestModel # 让 Django 知道在模型里有一些变更</span><br><span class="line">python manage.py migrate TestModel # 创建表结构</span><br></pre></td></tr></table></figure><p>可以看到在 MySQL 中自动创建了一个数据表。</p><p>表名组成结构为：应用名_类名（如：TestModel_test）。</p><p><strong>注意：</strong>尽管我们没有在 models 给表设置主键，但是 Django 会自动添加一个 id 作为主键。</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>接下来我们在 HelloWorld 目录中添加 testdb.py 文件（后面再介绍），并修改 urls.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views, testdb</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello),</span><br><span class="line">    path(<span class="string">&#x27;testdb/&#x27;</span>, testdb.testdb),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以下是 testdb.py 的操作。</p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>添加数据需要先创建对象，然后再执行 save 函数，相当于 SQL 中的 INSERT ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testdb</span>(<span class="params">request</span>):</span><br><span class="line">    test1 = Test(name=<span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">    test1.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>Django 提供了多种方式来获取数据库的内容，如下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testdb</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    response = <span class="string">&quot;&quot;</span></span><br><span class="line">    response1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span></span><br><span class="line">    listTest = Test.objects.<span class="built_in">all</span>()</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># filter相当于SQL中的WHERE，可设置条件过滤结果</span></span><br><span class="line">    response2 = Test.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取单个对象</span></span><br><span class="line">    response3 = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 限制返回的数据 相当于 SQL 中的 OFFSET 0 LIMIT 2;</span></span><br><span class="line">    Test.objects.order_by(<span class="string">&#x27;name&#x27;</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据排序</span></span><br><span class="line">    Test.objects.order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 上面的方法可以连锁使用</span></span><br><span class="line">    Test.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;runoob&quot;</span>).order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出所有数据</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> listTest:</span><br><span class="line">        response1 += var.name + <span class="string">&quot; &quot;</span></span><br><span class="line">    response = response1</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;&quot;</span> + response + <span class="string">&quot;&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>修改数据可以使用 save() 或 update()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testdb</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span></span><br><span class="line">    test1 = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    test1.name = <span class="string">&#x27;Google&#x27;</span></span><br><span class="line">    test1.save()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 另外一种方式</span></span><br><span class="line">    <span class="comment">#Test.objects.filter(id=1).update(name=&#x27;Google&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改所有的列</span></span><br><span class="line">    <span class="comment"># Test.objects.all().update(name=&#x27;Google&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;修改成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>删除数据库中的对象只需调用该对象的 delete() 方法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testdb</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 删除id=1的数据</span></span><br><span class="line">    test1 = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    test1.delete()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 另外一种方式</span></span><br><span class="line">    <span class="comment"># Test.objects.filter(id=1).delete()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 删除所有数据</span></span><br><span class="line">    <span class="comment"># Test.objects.all().delete()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;删除成功&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h2><p>我们在之前的项目中创建一个 search.py 文件，用于接收用户的请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># 表单</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_form</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;search_form.html&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 接收请求数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">request</span>):  </span><br><span class="line">    request.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;q&#x27;</span> <span class="keyword">in</span> request.GET <span class="keyword">and</span> request.GET[<span class="string">&#x27;q&#x27;</span>]:</span><br><span class="line">        message = <span class="string">&#x27;你搜索的内容为: &#x27;</span> + request.GET[<span class="string">&#x27;q&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message = <span class="string">&#x27;你提交了空表单&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(message)</span><br></pre></td></tr></table></figure><p>在模板目录 templates 中添加 search_form.html 表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/search/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>urls.py 规则修改为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views, testdb, search</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^hello/$&#x27;</span>, views.hello),</span><br><span class="line">    re_path(<span class="string">r&#x27;^testdb/$&#x27;</span>, testdb.testdb),</span><br><span class="line">    re_path(<span class="string">r&#x27;^search-form/$&#x27;</span>, search.search_form),</span><br><span class="line">    re_path(<span class="string">r&#x27;^search/$&#x27;</span>, search.search),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h2><p>上面我们使用了 GET 方法，视图显示和请求处理分成两个函数处理。</p><p>提交数据时更常用 POST 方法。我们下面使用该方法，并用一个 URL 和处理函数，同时显示视图和处理请求。</p><p>我们在 templates 创建 post.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/search-post/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; rlt &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模板的末尾，我们增加一个 rlt 记号，为表格处理结果预留位置。</p><p>表格后面还有一个 <code>&#123;% csrf_token %&#125;</code> 的标签，这是 Django 提供的防止 CSRF 漏洞的功能。POST 方法提交的表格，必须有此标签。</p><p>在 HelloWorld 目录下新建 search2.py 文件并使用 search_post 函数来处理 POST 请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views.decorators <span class="keyword">import</span> csrf</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 接收POST请求数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_post</span>(<span class="params">request</span>):</span><br><span class="line">    ctx =&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.POST:</span><br><span class="line">        ctx[<span class="string">&#x27;rlt&#x27;</span>] = request.POST[<span class="string">&#x27;q&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;post.html&quot;</span>, ctx)</span><br></pre></td></tr></table></figure><p>urls.py 规则修改为如下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views, testdb, search, search2</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^hello/$&#x27;</span>, views.hello),</span><br><span class="line">    re_path(<span class="string">r&#x27;^testdb/$&#x27;</span>, testdb.testdb),</span><br><span class="line">    re_path(<span class="string">r&#x27;^search-form/$&#x27;</span>, search.search_form),</span><br><span class="line">    re_path(<span class="string">r&#x27;^search/$&#x27;</span>, search.search),</span><br><span class="line">    re_path(<span class="string">r&#x27;^search-post/$&#x27;</span>, search2.search_post),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><p>每个视图函数的第一个参数是一个 HttpRequest 对象，就像下面这个 runoob() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>HttpRequest 对象包含当前请求 URL 的一些信息：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>path</td><td>请求页面的全路径，不包括域名，例如：”&#x2F;hello&#x2F;“。</td></tr><tr><td>method</td><td>请求中使用的HTTP方法的字符串表示，全大写表示。例如：<code>if request.method == &#39;GET&#39;</code> 。</td></tr><tr><td>GET</td><td>包含所有HTTP GET参数的类字典对象。</td></tr><tr><td>POST</td><td>包含所有HTTP POST参数的类字典对象。</td></tr><tr><td>REQUEST</td><td>为了方便，该属性是POST和GET属性的集合体，但是有特殊性，先查找POST属性，然后再查找GET属性。借鉴PHP’s $_REQUEST。例如，如果GET &#x3D; {“name”: “john”}和POST &#x3D; {“age”: ‘34’}，则 REQUEST[“name”] 的值是”john”，REQUEST[“age”]的值是”34”。</td></tr><tr><td>COOKIES</td><td>包含所有cookies的标准Python字典对象。keys和values都是字符串。</td></tr><tr><td>FILES</td><td>包含所有上传文件的类字典对象。注意：只有在请求方法是POST，并且请求页面中<code>&lt;form&gt;</code>有<code>enctype=&quot;multipart/form-data&quot;</code>属性时FILES才拥有数据。否则，FILES 是一个空字典。</td></tr><tr><td>raw_post_data</td><td>原始HTTP POST数据，未解析过。</td></tr></tbody></table><p>Request 对象也有一些有用的方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">has_key()</td><td align="left">检查request.GET or request.POST中是否包含参数指定的Key。</td></tr><tr><td align="left">get_full_path()</td><td align="left">返回包含查询字符串的请求路径。例如：<code> &quot;/music/bands/the_beatles/?print=true&quot;</code></td></tr><tr><td align="left">is_secure()</td><td align="left">如果请求是安全的，返回True，就是说，发出的是HTTPS请求。</td></tr></tbody></table><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h2><p>HttpRequest 对象，简称 request 对象。</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>取值格式示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">   name = request.GET.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>同 GET 。</p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>数据类型是二进制字节流，是原生请求体里的参数内容，在 HTTP 中用于 POST，因为 GET 没有请求体。</p><p>一般应用于：二进制图片、XML、Json 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.body</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>获取 URL 中的路径部分，数据类型是字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.path</span><br><span class="line">    <span class="built_in">print</span>(name) <span class="comment"># 如/hello/</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>获取当前请求的方式，数据类型是字符串，且结果为大写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    name = request.method</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h2><p>响应对象主要有三种形式：HttpResponse()、render()、redirect() 。</p><p><strong>HttpResponse():</strong> 返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有 html 标签，也可以渲染。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;a href=&#x27;https://www.runoob.com/&#x27;&gt;菜鸟教程&lt;/a&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>render():</strong> 返回文本，第一个参数为 request，第二个参数为字符串（页面名称），第三个参数为字典（可选参数，向页面传递的参数：键为页面参数名，值为views参数名）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    name =<span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;runoob.html&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:name&#125;)</span><br></pre></td></tr></table></figure><p>**redirect()**：重定向，跳转新页面。参数为字符串，字符串中填写页面路径。一般用于 form 表单提交后，跳转到新页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">runoob</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/index/&quot;</span>)</span><br></pre></td></tr></table></figure><p>render 和 redirect 是在 HttpResponse 的基础上进行了封装：</p><ul><li>render：底层返回的也是 HttpResponse 对象</li><li>redirect：底层继承的是 HttpResponse 对象</li></ul><h2 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h2><p><strong>FBV（function base views）</strong> 基于函数的视图，就是在视图里使用函数处理请求。</p><p><strong>CBV（class base views）</strong> 基于类的视图，就是在视图里使用类处理请求。</p><h3 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h3><p>基于函数的视图其实我们一直在使用，就是使用了函数来处理用户的请求，查看以下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.login),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;runoob&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法1&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h3><p>基于类的视图，就是使用了类来处理用户的请求，不同的请求我们可以在类中使用不同方法来处理，这样大大的提高了代码的可读性。</p><p>定义的类要继承父类 View，所以需要先引入库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure><p>其实，在我们前面学到的知识都知道 Django 的 url 是将一个请求分配给可调用的函数的，而不是一个类，那是如何实现基于类的视图的呢？ 主要还是通过父类 View 提供的一个静态方法 as_view() ，as_view 方法是基于类的外部接口， 他返回一个视图函数，调用后请求会传递给 dispatch 方法，dispatch 方法再根据不同请求来处理不同的方法。</p><p>将 FBV 的例子改为 CBV：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.Login.as_view()),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;runoob&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法 1&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行对应请求的方法前会优先执行 dispatch 方法(在get&#x2F;post&#x2F;put…方法前执行)，dispatch() 方法会根据请求的不同调用相应的方法来处理。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由简单的来说就是根据用户请求的 URL 链接来判断对应的处理程序，并返回处理结果，也就是 URL 与 Django 的视图建立映射关系。</p><p>Django 路由在 urls.py 配置，urls.py 中的每一条配置对应相应的处理方法。</p><p>配置方法：</p><ul><li>path：用于普通路径，不需要自己手动添加正则首位限制符号，底层已经添加。</li><li>re_path：用于正则路径，需要自己手动添加正则首位限制符号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index), <span class="comment"># 普通路径</span></span><br><span class="line">re_path(<span class="string">r&#x27;^articles/([0-9]&#123;4&#125;)/$&#x27;</span>, views.articles), <span class="comment"># 正则路径</span></span><br></pre></td></tr></table></figure><h2 id="正则路径中的分组"><a href="#正则路径中的分组" class="headerlink" title="正则路径中的分组"></a>正则路径中的分组</h2><h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><p>无名分组按位置传参，一一对应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">&quot;^index/([0-9]&#123;4&#125;)/$&quot;</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request, year</span>): </span><br><span class="line">    <span class="built_in">print</span>(year) <span class="comment"># 一个形参代表路径中一个分组的内容，按顺序匹配</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(year)</span><br></pre></td></tr></table></figure><h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?P&lt;组名&gt;正则表达式)</span><br></pre></td></tr></table></figure><p>有名分组按关键字传参，与位置顺序无关。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [ </span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), </span><br><span class="line">    re_path(<span class="string">&quot;^index/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&quot;</span>, views.index), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request, year, month</span>): </span><br><span class="line">    <span class="built_in">print</span>(year,month) <span class="comment"># 一个形参代表路径中一个分组的内容，按关键字对应匹配 </span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&#x27;year:<span class="subst">&#123;year&#125;</span> month:<span class="subst">&#123;month&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h2><p><strong>存在问题</strong>：Django 项目里多个 app 目录共用一个 urls 容易造成混淆，后期维护也不方便。</p><p><strong>解决</strong>：使用路由分发（include），让每个 app 目录都单独拥有自己的 urls 。</p><p><strong>步骤：</strong></p><ul><li>1、在每个 app 目录里都创建一个 urls.py 文件。</li><li>2、在项目名称目录下的 urls 文件里，统一将路径分发给各个 app 目录。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include <span class="comment"># 从 django.urls 引入 include </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    path(<span class="string">&quot;app01/&quot;</span>, include(<span class="string">&quot;app01.urls&quot;</span>)), </span><br><span class="line">    path(<span class="string">&quot;app02/&quot;</span>, include(<span class="string">&quot;app02.urls&quot;</span>)), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在各自 app 目录下，写自己的 urls.py 文件，进行路径跳转。</p><p>app01 目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path </span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment"># 从自己的 app 目录引入 views </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    re_path(<span class="string">r&#x27;^login/(?P&lt;m&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.index),</span><br><span class="line">] </span><br></pre></td></tr></table></figure><p>app02 目录:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views <span class="comment"># 从自己的 app 目录引入views </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    re_path(<span class="string">&quot;^xxx/(?P[0-9]&#123;4&#125;)/$&quot;</span>, views.xxx), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在各自 app 目录下的 views.py 文件中写各自的视图函数。</p><h2 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h2><p>当你改变 URL 模式时，不需要在代码的多个地方手动更新 URL，使用名称进行反向解析会自动适应更改。</p><h3 id="普通路径"><a href="#普通路径" class="headerlink" title="普通路径"></a>普通路径</h3><p>在 urls.py 中给路由起别名，**name&#x3D;”路由别名”**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;login1/&quot;</span>, views.login, name=<span class="string">&quot;login&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 views.py 中，从 django.urls 中引入 reverse，利用 <strong>reverse(“路由别名”)</strong> 反向解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(reverse(<span class="string">&quot;login&quot;</span>))</span><br></pre></td></tr></table></figure><p>在模板 templates 中的 HTML 文件中，利用 <code>&#123;% url "路由别名" %&#125;</code> 反向解析。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="正则路径（无名分组）"><a href="#正则路径（无名分组）" class="headerlink" title="正则路径（无名分组）"></a>正则路径（无名分组）</h3><p>在 urls.py 中给路由起别名，**name&#x3D;”路由别名”**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&quot;^login/([0-9]&#123;2&#125;)/$&quot;</span>, views.login, name=<span class="string">&quot;login&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 views.py 中，从 django.urls 中引入 reverse，利用 <strong>reverse(“路由别名”，args&#x3D;(符合正则匹配的参数,))</strong> 反向解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(reverse(<span class="string">&quot;login&quot;</span>,args=(<span class="number">10</span>,)))</span><br></pre></td></tr></table></figure><p>在模板 templates 中的 HTML 文件中利用 <code>&#123;% url "路由别名" 符合正则匹配的参数 %&#125;</code> 反向解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&#123;% url &#x27;login&#x27; 10 %&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt; </span><br></pre></td></tr></table></figure><h3 id="正则路径（有名分组）"><a href="#正则路径（有名分组）" class="headerlink" title="正则路径（有名分组）"></a>正则路径（有名分组）</h3><p>在 urls.py 中给路由起别名，**name&#x3D;”路由别名”**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&quot;^login/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&quot;</span>, views.login, name=<span class="string">&quot;login&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 views.py 中，从 django.urls 中引入 reverse，利用 <strong>reverse(“路由别名”，kwargs&#x3D;{“分组名”:符合正则匹配的参数})</strong> 反向解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(reverse(<span class="string">&quot;login&quot;</span>,kwargs=&#123;<span class="string">&quot;year&quot;</span>:<span class="number">3333</span>&#125;))</span><br></pre></td></tr></table></figure><p>在模板 templates 中的 HTML 文件中，利用 <code>&#123;% url "路由别名" 分组名=符合正则匹配的参数 %&#125;</code> 反向解析。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;login&#x27; year=3333 %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间是表示标识符的可见范围。</p><p>一个标识符可在多个命名空间中定义，它在不同命名空间中的含义是互不相干的。</p><p>一个新的命名空间中可定义任何标识符，它们不会与任何重复的标识符发生冲突，因为重复的定义都处于其它命名空间中。</p><p><strong>存在问题：</strong>路由别名 name 没有作用域，Django 在反向解析 URL 时，会在项目全局顺序搜索，当查找到第一个路由别名 name 指定 URL 时，立即返回。当在不同的 app 目录下的 urls 中定义相同的路由别名 name 时，可能会导致 URL 反向解析错误。</p><p><strong>解决：</strong>使用命名空间。</p><p>定义命名空间（include 里面是一个元组）格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include((<span class="string">&quot;app名称.urls&quot;</span>，<span class="string">&quot;app名称&quot;</span>))</span><br><span class="line"><span class="comment"># 例</span></span><br><span class="line">path(<span class="string">&quot;app01/&quot;</span>, include((<span class="string">&quot;app01.urls&quot;</span>,<span class="string">&quot;app01&quot;</span>))) </span><br></pre></td></tr></table></figure><p>在 app01&#x2F;urls.py 中起相同的路由别名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&quot;login/&quot;</span>, views.login, name=<span class="string">&quot;login&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 views.py 中使用名称空间，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reverse(<span class="string">&quot;app名称:路由别名&quot;</span>)</span><br><span class="line"><span class="comment"># 例</span></span><br><span class="line"><span class="keyword">return</span> redirect(reverse(<span class="string">&quot;app01:login&quot;</span>)</span><br></pre></td></tr></table></figure><p>在 templates 模板的 HTML 文件中使用名称空间，语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &#x27;app名称:路由别名&#x27; %&#125;</span><br></pre></td></tr></table></figure><h1 id="Admin管理工具"><a href="#Admin管理工具" class="headerlink" title="Admin管理工具"></a>Admin管理工具</h1><p>Django 提供了基于 web 的管理工具。</p><p>Django 自动管理工具是 django.contrib 的一部分。你可以在项目的 settings.py 中的 INSTALLED_APPS 看到它。</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>修改 urls.py ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>运行 <code>python manage.py migrate</code> 创建必要的数据表。</p><p>运行 <code>python manage.py createsuperuser</code> 来创建超级用户。</p><p>访问 <code>http://127.0.0.1:8000/admin/</code> 登录。</p><p>为了让 admin 界面管理某个数据模型，我们需要先注册该数据模型到 admin 。比如，我们之前在 TestModel 中已经创建了模型 Test 。修改 TestModel&#x2F;admin.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(Test)</span><br></pre></td></tr></table></figure><p>刷新后即可看到 Testmodel 数据表。</p><p>注册多个模型并显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> TestModel.models <span class="keyword">import</span> Test,Contact,Tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register([Test, Tag, Contact])</span><br></pre></td></tr></table></figure><p>刷新管理页面即可。</p><h1 id="ORM-1"><a href="#ORM-1" class="headerlink" title="ORM"></a>ORM</h1><h2 id="单表实例"><a href="#单表实例" class="headerlink" title="单表实例"></a>单表实例</h2><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>在 TestModel 中的 models.py 中添加以下类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model): </span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>) <span class="comment"># id 会自动创建,可以手动写入</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>) <span class="comment"># 书籍名称</span></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>) <span class="comment"># 书籍价格 </span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    max_digits=5 指定该字段的总数字符数，包括小数点前后的数字；</span></span><br><span class="line"><span class="string">    decimal_places=2 指定小数点后有 2 位数字。</span></span><br><span class="line"><span class="string">    因此，这个字段可以存储的最大值是 999.99。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    publish = models.CharField(max_length=<span class="number">32</span>) <span class="comment"># 出版社名称 </span></span><br><span class="line">    pub_date = models.DateField() <span class="comment"># 出版时间</span></span><br></pre></td></tr></table></figure><p>然后在命令行执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations TestModel  # 让 Django 知道我们在我们的模型有一些变更</span><br><span class="line">python manage.py migrate TestModel  # 创建表结构</span><br></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>规则配置：</p><p>1、在 HelloWorld 的 urls.py 中添加路由分发：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;testmodel/&#x27;</span>, include(<span class="string">&#x27;TestModel.urls&#x27;</span>))</span><br></pre></td></tr></table></figure><p>2、在 TestModel 中创建 urls.py ，写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"> </span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;add_book/&#x27;</span>, views.add_book),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>方式一：</strong>模型类实例化对象</p><p>需从 app 目录引入 models.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app目录 <span class="keyword">import</span> models</span><br></pre></td></tr></table></figure><p>并且实例化对象后要执行 <strong>对象.save()</strong> 才能在数据库中新增成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TestModel/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    book = models.Book(title=<span class="string">&quot;菜鸟教程&quot;</span>,price=<span class="number">300</span>,publish=<span class="string">&quot;菜鸟出版社&quot;</span>,pub_date=<span class="string">&quot;2008-8-8&quot;</span>) </span><br><span class="line">    book.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>通过 ORM 提供的 objects 提供的方法 create 来实现（推荐）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TestModel/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    books = models.Book.objects.create(title=<span class="string">&quot;如来神掌&quot;</span>,price=<span class="number">200</span>,publish=<span class="string">&quot;功夫出版社&quot;</span>,pub_date=<span class="string">&quot;2010-10-10&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;数据添加成功！&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>使用 <strong>all()</strong> 方法来查询所有内容。</p><p>返回的是 QuerySet 类型数据，类似于 list，里面放的是一个个模型类的对象，可用索引下标取出模型类的对象。</p><p>后面说“返回的是 QuerySet 类型数据”默认如上所述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TestModel/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> TestModel <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    books = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">f&quot;&lt;p&gt;查找成功！title:<span class="subst">&#123;books[<span class="number">0</span>].title&#125;</span>&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>filter()</strong> 方法用于查询符合条件的数据。</p><p>返回的是 QuerySet 类型数据。</p><p>pk&#x3D;3 的意思是主键 primary key&#x3D;3，相当于 id&#x3D;3。</p><p>因为 id 在 pycharm 里有特殊含义，是看内存地址的内置函数 id()，因此用 pk。</p><p>filter 中运算符号只能使用等于号 &#x3D; ，不能使用大于号 &gt; ，小于号 &lt; ，等等其他符号。</p><p>__in 用于读取区间，&#x3D; 号后面为列表 。</p><p>__gt 大于号 ，&#x3D; 号后面为数字。</p><p>__gte 大于等于，&#x3D; 号后面为数字。</p><p>__lt 小于，&#x3D; 号后面为数字。</p><p>__lte 小于等于，&#x3D; 号后面为数字。</p><p>__range 在 … 之间，左闭右闭区间，&#x3D; 号后面为两个元素的列表。</p><p>__contains 包含，&#x3D; 号后面为字符串。</p><p>__icontains 不区分大小写的包含，&#x3D; 号后面为字符串。</p><p>__startswith 以指定字符开头，&#x3D; 号后面为字符串。</p><p>__endswith 以指定字符结尾，&#x3D; 号后面为字符串。</p><p>__year 是 DateField 数据类型的年份，&#x3D; 号后面为数字。</p><p>__month 是DateField 数据类型的月份，&#x3D; 号后面为数字。</p><p>__day 是DateField 数据类型的天数，&#x3D; 号后面为数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">1</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(publish=<span class="string">&#x27;菜鸟出版社&#x27;</span>, price=<span class="number">300</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__in=[<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__gt=<span class="number">200</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__gte=<span class="number">200</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__lt=<span class="number">300</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__lte=<span class="number">300</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price__range=[<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&quot;菜&quot;</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(title__icontains=<span class="string">&quot;python&quot;</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(title__startswith=<span class="string">&quot;菜&quot;</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(title__endswith=<span class="string">&quot;教程&quot;</span>)</span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pub_date__year=<span class="number">2008</span>) </span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pub_date__month=<span class="number">10</span>) </span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pub_date__day=01)</span><br></pre></td></tr></table></figure><p><strong>exclude()</strong> 方法用于查询不符合条件的数据。</p><p>返回的是 QuerySet 类型数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.exclude(pk=<span class="number">5</span>)</span><br><span class="line">books = models.Book.objects.exclude(publish=<span class="string">&#x27;菜鸟出版社&#x27;</span>, price=<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p><strong>get()</strong> 方法用于查询符合条件数据。</p><p>符合条件的对象只能为一个，如果符合筛选条件的对象超过了一个或者没有一个都会抛出错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.get(pk=<span class="number">5</span>)</span><br><span class="line">books = models.Book.objects.get(pk=<span class="number">18</span>)  <span class="comment"># 报错，没有符合条件的对象</span></span><br><span class="line">books = models.Book.objects.get(price=<span class="number">200</span>)  <span class="comment"># 报错，符合条件的对象超过一个</span></span><br></pre></td></tr></table></figure><p><strong>order_by()</strong> 方法用于对查询结果进行排序。</p><p>返回的是 QuerySet类型数据。</p><p><strong>注意：</strong></p><ul><li>参数的字段名要加引号。</li><li>降序为在字段前面加个负号 <code>-</code> 。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.order_by(<span class="string">&quot;price&quot;</span>) <span class="comment"># 查询所有，按照价格升序排列 </span></span><br><span class="line">books = models.Book.objects.order_by(<span class="string">&quot;-price&quot;</span>) <span class="comment"># 查询所有，按照价格降序排列</span></span><br></pre></td></tr></table></figure><p><strong>reverse()</strong> 方法用于对查询结果进行反转。</p><p>返回的是 QuerySe t类型数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照价格升序排列，因为先降序后进行了反转</span></span><br><span class="line">books = models.Book.objects.order_by(<span class="string">&quot;-price&quot;</span>).reverse()</span><br></pre></td></tr></table></figure><p><strong>count()</strong> 方法用于查询数据的数量，返回的数据是整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.count() <span class="comment"># 查询所有数据的数量 </span></span><br><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(price=<span class="number">200</span>).count() <span class="comment"># 查询符合条件数据的数量</span></span><br></pre></td></tr></table></figure><p><strong>first()</strong> 方法返回第一条数据，返回的数据是模型类的对象。</p><p>也可以用索引下标 **[0]**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.first() <span class="comment"># 返回所有数据的第一条数据</span></span><br></pre></td></tr></table></figure><p><strong>last()</strong> 方法返回最后一条数据，返回的数据是模型类的对象。</p><p>不能用索引下标 **[-1]**，ORM 没有逆序索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.last() <span class="comment"># 返回所有数据的最后一条数据</span></span><br></pre></td></tr></table></figure><p><strong>exists()</strong> 方法用于判断查询的结果 QuerySet 列表里是否有数据。</p><p>返回的数据类型是布尔，有为 true，没有为 false。</p><p><strong>注意：</strong>判断的数据类型只能为 QuerySet 类型数据，不能为整型和模型类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.exists()</span><br><span class="line">books = models.Book.objects.count().exists() <span class="comment"># 报错，判断的数据类型只能为QuerySet类型数据，不能为整型</span></span><br><span class="line">books = models.Book.objects.first().exists() <span class="comment"># 报错，判断的数据类型只能为QuerySet类型数据，不能为模型类对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的使用方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">request</span>):</span><br><span class="line">    has_books = models.Book.objects.exists()  <span class="comment"># 这会返回 True 或 False</span></span><br><span class="line">    <span class="keyword">if</span> has_books:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;书籍存在！&lt;/p&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;p&gt;没有书籍。&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>values()</strong> 方法用于查询部分字段。</p><p>返回的是 QuerySet 类型数据，类似于 list，里面不是模型类的对象，而是一个可迭代的<strong>字典</strong>序列，字典里的键是字段，值是数据。</p><p><strong>注意：</strong>参数的字段名要加引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.values(<span class="string">&quot;pk&quot;</span>,<span class="string">&quot;price&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(books[<span class="number">0</span>][<span class="string">&quot;price&quot;</span>])</span><br></pre></td></tr></table></figure><p><strong>values_list()</strong> 方法用于查询部分字段的数据。</p><p>返回的是 QuerySet 类型数据，类似于 list，里面不是模型类的对象，而是一个个<strong>元组</strong>，元组里放的是查询字段对应的数据。</p><p>想要字段名和数据用 values ，只想要数据用 values_list 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.values_list(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;publish&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(books[<span class="number">0</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>distinct()</strong> 方法用于对数据进行去重。</p><p>返回的是 QuerySet 类型数据。</p><p><strong>注意：</strong></p><ul><li>对模型类的对象去重没有意义，因为每个对象都是一个不一样的存在。</li><li>distinct() 一般是联合 values 或者 values_list 使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.values_list(<span class="string">&quot;publish&quot;</span>).distinct()</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>方式一：</strong>使用模型类的 <strong>对象.delete()</strong> 。</p><p><strong>返回值：</strong>元组，第一个元素为受影响的行数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books=models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">8</span>).first().delete()</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：使用 QuerySet **类型数据.delete()**（推荐）</p><p><strong>返回值：</strong>元组，第一个元素为受影响的行数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books=models.Book.objects.<span class="built_in">filter</span>(pk__in=[<span class="number">1</span>,<span class="number">2</span>]).delete()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>Django 删除数据时，会模仿 SQL 约束 ON DELETE CASCADE 的行为，也就是删除一个对象时也会删除与它相关联的外键对象。</li><li>delete() 方法是 QuerySet 数据类型的方法，想要删除所有数据，不能不写 all。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">books=models.Book.objects.delete()　 <span class="comment"># 报错</span></span><br><span class="line">books=models.Book.objects.<span class="built_in">all</span>().delete()　　 <span class="comment"># 删除成功</span></span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><strong>方式一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模型类的对象.属性 = 更改的属性值</span><br><span class="line">模型类的对象.save()</span><br></pre></td></tr></table></figure><p><strong>返回值：</strong>编辑的模型类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pk=<span class="number">7</span>).first() </span><br><span class="line">books.price = <span class="number">400</span> </span><br><span class="line">books.save()</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>QuerySet 类型数据.update(字段名&#x3D;更改的数据)（推荐）</p><p><strong>返回值：</strong>整数，受影响的行数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">books = models.Book.objects.<span class="built_in">filter</span>(pk__in=[<span class="number">7</span>,<span class="number">8</span>]).update(price=<span class="number">888</span>)</span><br></pre></td></tr></table></figure><h2 id="多表实例"><a href="#多表实例" class="headerlink" title="多表实例"></a>多表实例</h2><p>多表关联下的操作。</p><p>一般学习场景下用不到那么复杂的数据表关系，遇到具体业务的时候再学习。</p><p>参考文献：<a href="https://www.runoob.com/django/django-orm-2.html">https://www.runoob.com/django/django-orm-2.html</a></p><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p>聚合查询函数 aggregate() 是对一组值执行计算，并返回单个值。</p><p>Django 使用聚合查询前要先从 django.db.models 引入 Avg、Max、Min、Count、Sum（首字母大写）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Min,Count,Sum  <span class="comment">#   引入函数</span></span><br></pre></td></tr></table></figure><p>聚合查询返回值的数据类型是字典。</p><p>使用 aggregate() 后，数据类型就变为字典，不能再使用 QuerySet 数据类型的一些 API 了。</p><p>日期数据类型（DateField）可以用 Max 和 Min。</p><p>返回的字典中，键的名称默认是（属性名称加上 <code>__聚合函数名</code> ，如 <code>price_avg</code>），值是计算出来的聚合值。</p><p>如果要自定义返回字典的键的名称，可以起别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aggregate(别名 = 聚合函数名(<span class="string">&quot;属性名称&quot;</span>))</span><br></pre></td></tr></table></figure><p>计算所有图书的平均价格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.aggregate(Avg(<span class="string">&quot;price&quot;</span>))</span><br></pre></td></tr></table></figure><p>计算所有图书的数量、最贵价格和最便宜价格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.aggregate(c=Count(<span class="string">&quot;id&quot;</span>),<span class="built_in">max</span>=Max(<span class="string">&quot;price&quot;</span>),<span class="built_in">min</span>=Min(<span class="string">&quot;price&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>分组查询 annotate() 一般会用到聚合函数，使用前要先引入。</p><p><strong>返回值：</strong></p><ul><li>分组后，用 values 取值，则返回值是 QuerySet 数据类型，里面为一个个字典；</li><li>分组后，用 values_list 取值，则返回值是 QuerySet 数据类型，里面为一个个元组。</li></ul><p><strong>注意：</strong></p><p>annotate 里面放聚合函数。</p><ul><li><strong>values 或者 values_list 放在 annotate 前面：</strong>values 或者 values_list 是声明以什么字段分组，annotate 执行分组。</li><li><strong>values 或者 values_list 放在 annotate 后面：</strong> annotate 表示直接以当前表的 pk 执行分组，values 或者 values_list 表示查询哪些字段， 并且要将 annotate 里的聚合函数起别名，在 values 或者 values_list 里写其别名。</li></ul><p><strong>实例</strong>：</p><p>统计每一个出版社的最便宜的书的价格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = models.Publish.objects.values(<span class="string">&quot;name&quot;</span>).annotate(in_price = Min(<span class="string">&quot;book__price&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;菜鸟出版社&#x27;</span>, <span class="string">&#x27;in_price&#x27;</span>: Decimal(<span class="string">&#x27;100.00&#x27;</span>)&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;明教出版社&#x27;</span>, <span class="string">&#x27;in_price&#x27;</span>: Decimal(<span class="string">&#x27;300.00&#x27;</span>)&#125;]&gt;</span><br></pre></td></tr></table></figure><p>统计每一本书的作者个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.annotate(c = Count(<span class="string">&quot;authors__name&quot;</span>)).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;吸星大法&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;冲灵剑法&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;]&gt;</span><br></pre></td></tr></table></figure><p>统计每一本以”菜”开头的书籍的作者个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.<span class="built_in">filter</span>(title__startswith=<span class="string">&quot;菜&quot;</span>).annotate(c = Count(<span class="string">&quot;authors__name&quot;</span>)).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;]&gt;</span><br></pre></td></tr></table></figure><p>统计不止一个作者的图书名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.annotate(c = Count(<span class="string">&quot;authors__name&quot;</span>)).<span class="built_in">filter</span>(c__gt=<span class="number">0</span>).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;吸星大法&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;冲灵剑法&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;]&gt;</span><br></pre></td></tr></table></figure><h2 id="F和Q查询"><a href="#F和Q查询" class="headerlink" title="F和Q查询"></a>F和Q查询</h2><h3 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a>F查询</h3><p>F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。</p><p>之前构造的过滤器都只是将字段值与某个常量做比较，如果想要对两个字段的值做比较，就需要用到 F()。</p><p>使用前要先从 django.db.models 引入 F：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(<span class="string">&quot;字段名称&quot;</span>)</span><br></pre></td></tr></table></figure><p>F 动态获取对象字段的值，可以进行运算。</p><p>Django 支持 F() 对象之间以及 F() 对象和常数之间的加减乘除和取余的操作。</p><p>修改操作（update）也可以使用 F() 函数。</p><p>查询工资大于年龄的人：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book = models.Emp.objects.<span class="built_in">filter</span>(salary__gt=F(<span class="string">&quot;age&quot;</span>)).values(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>)</span><br></pre></td></tr></table></figure><p>将每一本书的价格提高 100 元：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = models.Book.objects.update(price=F(<span class="string">&quot;price&quot;</span>)+<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h3><p>使用前要先从 django.db.models 引入 Q:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q(<span class="string">&quot;条件判断&quot;</span>)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q(title__startswith=<span class="string">&quot;菜&quot;</span>)</span><br></pre></td></tr></table></figure><p>之前构造的过滤器里的多个条件的关系都是 and，如果需要执行更复杂的查询（例如 or 语句），就可以使用 Q 。</p><p>Q 对象可以使用 &amp; | ~ （与 或 非）操作符进行组合，优先级从高到低：~ &amp; | 。</p><p>可以混合使用 Q 对象和关键字参数，Q 对象和关键字参数是用 “and” 拼在一起的（即将逗号看成 and ），但是 Q 对象必须位于所有关键字参数的前面。</p><p>实例：</p><p>查询价格大于 350 或者名称以菜开头的书籍的名称和价格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=models.Book.objects.<span class="built_in">filter</span>(Q(price__gt=<span class="number">350</span>)|Q(title__startswith=<span class="string">&quot;菜&quot;</span>)).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>)</span><br></pre></td></tr></table></figure><p>查询以”菜”结尾或者不是 2010 年 10 月份的书籍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=models.Book.objects.<span class="built_in">filter</span>(Q(title__endswith=<span class="string">&quot;菜&quot;</span>) | ~Q(Q(pub_date__year=<span class="number">2010</span>) &amp; Q(pub_date__month=<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><p>查询出版日期是 2004 或者 1999 年，并且书名中包含有”菜”的书籍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Q 对象和关键字混合使用，Q 对象要在所有关键字的前面</span></span><br><span class="line">res = models.Book.objects.<span class="built_in">filter</span>(Q(pub_date__year=<span class="number">2004</span>) | Q(pub_date__year=<span class="number">1999</span>), title__contains=<span class="string">&quot;菜&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Form组件"><a href="#Form组件" class="headerlink" title="Form组件"></a>Form组件</h1><p>一些更深入和规范的 form 表单模板开发规则。</p><p>现在一般都是前后端分离架构，遇到具体业务的时候再学习。</p><p>参考文献：<a href="https://www.runoob.com/django/django-form-component.html">https://www.runoob.com/django/django-form-component.html</a></p><h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><p>Django 用户认证（Auth）组件一般用在用户的登录注册上，用于判断当前的用户是否合法，并跳转到登陆成功或失败页面。</p><p>Django 用户认证（Auth）组件需要导入 auth 模块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 认证模块</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应数据库</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure><p>返回值是用户对象。</p><p>创建用户对象的三种方法：</p><ul><li>**create()**：创建一个普通用户，密码是明文的。</li><li>**create_user()**：创建一个普通用户，密码是密文的。</li><li>**create_superuser()**：创建一个超级用户，密码是密文的，要多传一个邮箱 email 参数。</li></ul><p><strong>参数：</strong></p><ul><li>username: 用户名。</li><li>password：密码。</li><li>email：邮箱 (create_superuser 方法要多加一个 email)。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line">User.objects.create(username=<span class="string">&#x27;runboo&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">User.objects.create_user(username=<span class="string">&#x27;runbooo&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">User.objects.create_superuser(username=<span class="string">&#x27;runboooo&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,email=<span class="string">&#x27;runboo@163.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>验证用户的用户名和密码使用 authenticate() 方法，从 auth_user 表中过滤出用户对象。</p><p>使用前要导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>username：用户名</li><li>password：密码</li></ul><p><strong>返回值：</strong>如果验证成功，就返回用户对象，反之，返回 None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    <span class="comment"># 下面两行是验证码</span></span><br><span class="line">    valid_num = request.POST.get(<span class="string">&quot;valid_num&quot;</span>)</span><br><span class="line">    keep_str = request.session.get(<span class="string">&quot;keep_str&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_str.upper() == valid_num.upper():</span><br><span class="line">        user_obj = auth.authenticate(username=username, password=password)</span><br><span class="line">        <span class="built_in">print</span>(user_obj.username)</span><br></pre></td></tr></table></figure><p>验证成功并登录，使用 login() 方法。</p><p>使用前要导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>request：用户对象</li></ul><p>返回值：None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    valid_num = request.POST.get(<span class="string">&quot;valid_num&quot;</span>)</span><br><span class="line">    keep_str = request.session.get(<span class="string">&quot;keep_str&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> keep_str.upper() == valid_num.upper():</span><br><span class="line">        user_obj = auth.authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 登陆使用login()方法，将request.user赋值为用户对象</span></span><br><span class="line">            auth.login(request, user_obj)</span><br><span class="line">            path = <span class="string">&quot;/index/&quot;</span></span><br><span class="line">            <span class="keyword">return</span> redirect(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure><p>注销用户使用 logout() 方法，将 request.user 赋值为匿名用户。</p><p>使用前要导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>request：用户对象</li></ul><p>返回值：None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>): </span><br><span class="line">    ppp = auth.logout(request) </span><br><span class="line">    <span class="built_in">print</span>(ppp) <span class="comment"># None </span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure><p>设置装饰器，给需要登录成功后才能访问的页面统一加装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required </span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>): </span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;index页面。。。&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie&#x2F;Session"></a>Cookie&#x2F;Session</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 是存储在客户端计算机上的文本文件，并保留了各种跟踪信息。</p><p>识别返回用户包括三个步骤：</p><ul><li>服务器脚本向浏览器发送一组 Cookie 。例如：姓名、年龄或识别号码等。</li><li>浏览器将这些信息存储在本地计算机上，以备将来使用。</li><li>当下一次浏览器向 Web 服务器发送任何请求时，浏览器会把这些 Cookie 信息发送到服务器，服务器将使用这些信息来识别用户。</li></ul><p>HTTP 是一种”无状态”协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录。</p><p>一个 Web 服务器可以分配一个唯一的 session 会话 ID 作为每个 Web 客户端的 cookie，对于客户端的后续请求可以使用接收到的 cookie 来识别。</p><p>在 Web 开发中，使用 session 来完成会话跟踪，session 底层依赖 Cookie 技术。</p><p><img src="https://raw.githubusercontent.com/Nampuchain/ImageHost/main/Django/1.png?token=AWGBYU4XC4XBCOCI2UBXKRTHC6KKM"></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>设置 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rep.set_cookie(key,value,...) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">功能: 设置一个普通的 Cookie。</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">- key: Cookie 的名称。</span></span><br><span class="line"><span class="string">- value: Cookie 的值。</span></span><br><span class="line"><span class="string">- 其他可选参数（如过期时间、路径、域等）可以用来配置 Cookie 的行为。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">rep.set_signed_cookie(key,value,salt=<span class="string">&#x27;加密盐&#x27;</span>,...)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">功能: 设置一个经过签名的 Cookie，用于确保 Cookie 内容的完整性和真实性。</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">- key: Cookie 的名称。</span></span><br><span class="line"><span class="string">- value: Cookie 的值。</span></span><br><span class="line"><span class="string">- salt: 用于签名的盐值（字符串），增加签名的复杂性和安全性。</span></span><br><span class="line"><span class="string">- 其他可选参数（如过期时间、路径、域等）同样可以用来配置 Cookie 的行为。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>获取 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.COOKIES.get(<span class="string">&quot;key名称&quot;</span>)</span><br></pre></td></tr></table></figure><p>删除 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request</span>):</span><br><span class="line">    rep = HttpResponse(<span class="string">&quot;Some response&quot;</span>)</span><br><span class="line">    <span class="comment"># delete_cookie 适用于 HttpResponse 对象</span></span><br><span class="line">    rep.delete_cookie(<span class="string">&quot;my_cookie&quot;</span>)  <span class="comment"># 删除名为 &quot;my_cookie&quot; 的 Cookie</span></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure><p>HttpResponse 对象可由 HttpResponse 或 render 或 redirect 得到。</p><h3 id="一个与登录相关的代码"><a href="#一个与登录相关的代码" class="headerlink" title="一个与登录相关的代码"></a>一个与登录相关的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line"></span><br><span class="line">    user_obj = models.UserInfo.objects.<span class="built_in">filter</span>(username=username, password=password).first()</span><br><span class="line">    <span class="built_in">print</span>(user_obj.username)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        auth.login(request, user_obj)</span><br><span class="line">        rep = redirect(<span class="string">&quot;/index/&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置Cookie</span></span><br><span class="line">        rep.set_cookie(<span class="string">&quot;is_login&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> rep</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.COOKIES.get(<span class="string">&#x27;is_login&#x27;</span>))</span><br><span class="line">    status = request.COOKIES.get(<span class="string">&#x27;is_login&#x27;</span>) <span class="comment"># 收到浏览器的再次请求,判断浏览器携带的cookie是不是登录成功的时候响应的 cookie</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> status:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    rep = redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">&quot;is_login&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rep <span class="comment"># 点击注销后执行，删除cookie，不再保存用户状态，并弹到登录页面</span></span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session 是保存在服务端的键值对。</p><p>服务器在运行时可以为每一个用户的浏览器创建一个其独享的 session 对象，由于 session 为用户浏览器独享，所以用户在访问服务器的 web 资源时，可以把各自的数据放在各自的 session 中，当用户再去访问该服务器中的其它 web 资源时，其它 web 资源再从用户各自的 session 中取出数据为用户服务。</p><p><img src="https://raw.githubusercontent.com/Nampuchain/ImageHost/main/Django/2.jpg?token=AWGBYUZZDEWIHI77Y7QOFNLHC6KLA"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li><p>浏览器第一次请求获取登录页面 login。</p></li><li><p>浏览器输入账号密码第二次请求，若输入正确，服务器响应浏览器一个 index 页面和一个键为 sessionid，值为随机字符串的 cookie，即 set_cookie(“sessionid”,随机字符串)。</p></li><li><p>服务器内部在 django.session 表中记录一条数据。</p><p>django.session 表中有三个字段。</p><ul><li><p>session_key：存的是随机字符串，即响应给浏览器的 cookie 的 sessionid 键对应的值。</p></li><li><p>session_data：存的是用户的信息，即多个 request.session[“key”]&#x3D;value，且是密文。</p><blockquote><p><code>session_data</code> 字段在 <code>django.session</code> 表中存储用户的会话信息，主要包括以下几个方面：</p><p>1、 数据格式</p><ul><li>序列化: Django 会将存储在 <code>request.session</code> 中的所有数据序列化为字符串格式（通常是使用 JSON 或 pickle 序列化）。</li><li>密文存储: 由于 <code>session_data</code> 存储的是序列化后的数据，因此可以包括多个键值对，用户的所有会话信息都会集中存放在这个字段中。</li></ul><p>2、内容</p><ul><li><p>用户数据: 可能包含用户登录状态、用户 ID、权限、偏好设置等信息。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.session[&#x27;user_id&#x27;] = user.id</span><br><span class="line">request.session[&#x27;is_logged_in&#x27;] = True</span><br><span class="line">request.session[&#x27;preferences&#x27;] = &#123;&#x27;theme&#x27;: &#x27;dark&#x27;, &#x27;language&#x27;: &#x27;en&#x27;&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>expire_date：存的是该条记录的过期时间（默认14天）。</p></li></ul></li><li><p>浏览器第三次请求其他资源时，携带 cookie:{sessionid:随机字符串}，服务器从 django.session 表中根据该随机字符串取出该用户的数据，供其使用（即保存状态）。</p></li></ul><p><strong>注意：</strong></p><p>1、会话与浏览器的关系</p><ul><li>浏览器唯一性: Django 的会话管理是基于浏览器的。每个浏览器实例（或标签页）都有自己的会话 cookie（<code>sessionid</code>），用于标识该会话。</li><li>单条记录: 如果同一个浏览器在不同时间登录了不同的用户，Django 只会保留最后一次登录的用户信息，之前的会话信息会被覆盖。因此，只有一个有效的会话记录。</li></ul><p>2、多个浏览器</p><ul><li>多条记录: 当使用不同的浏览器（或设备）时，每个浏览器都会有自己的会话 cookie，因此每个浏览器的请求会生成独立的会话记录。这意味着不同浏览器的用户信息可以并存。</li></ul><p>总之，Django 的会话管理是以浏览器为单位的，每个浏览器只能保存一条会话记录，因此同一浏览器切换用户时会导致之前的信息被覆盖。不同的浏览器则可以保持各自独立的会话记录。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>cookie 弥补了 http 无状态的不足，让服务器知道来的人是”谁”，但是 cookie 以文本的形式保存在浏览器端，安全性较差，且最大只支持 4096 字节，所以只通过 cookie 识别不同的用户，然后，在对应的 session 里保存私密的信息以及超过 4096 字节的文本。</p><p>session 设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">&quot;key&quot;</span>] = value</span><br></pre></td></tr></table></figure><p>执行步骤：</p><ul><li>生成随机字符串。</li><li>把随机字符串和设置的键值对保存到 django_session 表的 session_key 和 session_data 里。</li><li>设置 cookie：set_cookie(“sessionid”, 随机字符串) 响应给浏览器。</li></ul><p>session 获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session.get(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行步骤：</p><ul><li>从 cookie 中获取 sessionid 键的值，即随机字符串。</li><li>根据随机字符串从 django_session 表过滤出记录。</li><li>取出 session_data 字段的数据。</li></ul><p>session 删除，删除整条记录（包括 session_key、session_data、expire_date 三个字段）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.session.flush()</span><br></pre></td></tr></table></figure><p>删除 session_data 里的其中一组键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> request.session[<span class="string">&quot;key&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行步骤：</p><ul><li>从 cookie 中获取 sessionid 键的值，即随机字符串。</li><li>根据随机字符串从 django_session 表过滤出记录。</li><li>删除过滤出来的记录。</li></ul><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>Django 中间件是修改 Django request 或者 response 对象的钩子，可以理解为是介于 HttpRequest 与 HttpResponse 处理之间的一道处理过程。</p><p>目前还没有接触过需要中间件的项目，遇到具体业务的时候再学习。</p><p>参考文献：<a href="https://www.runoob.com/django/django-middleware.html">https://www.runoob.com/django/django-middleware.html</a></p><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Django 默认不支持 WebSocket，安装第三方组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install channels</span><br></pre></td></tr></table></figure><p>前端测试页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- WebSocket测试 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>输入&quot;exit&quot;关闭连接<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span>Input: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">log</span> = (<span class="params">text, color</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;msg&#x27;</span>).<span class="property">innerHTML</span> += <span class="string">`&lt;span style=&quot;color: <span class="subst">$&#123;color&#125;</span>&quot;&gt;<span class="subst">$&#123;text&#125;</span>&lt;/span&gt;&lt;br&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:8000/temperature&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">log</span>(<span class="string">&#x27;&lt;&lt;&lt; &#x27;</span> + ev.<span class="property">data</span>, <span class="string">&#x27;blue&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>).<span class="property">onsubmit</span> = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            ev.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> textField = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;&gt; 原始：&#x27;</span> + textField.<span class="property">value</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            socket.<span class="title function_">send</span>(textField.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            textField.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><p>在你的应用中（即 wsgi.py 所在目录）创建一个 consumers.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> AsyncWebsocketConsumer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承AsyncWebsocketConsumer类，这是Django Channels提供的一个异步消费者类，专用于处理WebSocket连接</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressConsumer</span>(<span class="title class_ inherited__">AsyncWebsocketConsumer</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">await</span> self.accept()</span><br><span class="line">        <span class="comment"># 启动发送hello的后台任务</span></span><br><span class="line">        asyncio.create_task(self.send_hello())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">await</span> self.send(text_data=json.dumps(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello&quot;</span>&#125;))</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">self, text_data</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, text_data)</span><br></pre></td></tr></table></figure><blockquote><p><strong>1、async</strong></p><ul><li><code>async</code>是一个关键字，用于定义异步函数。异步函数在被调用时不会立即执行，而是返回一个协程对象，直到被<code>await</code>或事件循环执行。</li><li>使用<code>async</code>定义的函数允许使用<code>await</code>关键字，可以挂起函数的执行，等待其他协程完成。</li></ul><p><strong>2、await</strong></p><ul><li><code>await</code>关键字用于等待一个协程或可等待对象的完成。它只能在<code>async</code>定义的函数内部使用。</li><li>当程序执行到<code>await</code>时，会暂停当前协程的执行，直到被等待的操作完成，然后恢复执行。这使得其他协程可以运行，避免了阻塞。</li></ul><p><strong>3、asyncio</strong></p><ul><li><code>asyncio</code>是Python标准库中的一个模块，用于编写并发代码。</li><li>使用<code>asyncio</code>，可以创建事件循环，调度协程，处理I&#x2F;O操作，而不会阻塞主线程。这使得异步编程变得更加高效。</li></ul><p><strong>4、self</strong></p><ul><li><code>self</code>是一个约定，用于指代类的实例。在类的方法中，第一个参数通常命名为<code>self</code>，代表调用该方法的对象实例。</li><li>通过<code>self</code>，可以访问实例的属性和其他方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self, value):</span><br><span class="line">        self.value = value  # 使用self访问实例属性</span><br><span class="line"></span><br><span class="line">   def display(self):</span><br><span class="line">        print(self.value)</span><br><span class="line"></span><br><span class="line">obj = MyClass(10)</span><br><span class="line">obj.display()  # 输出10</span><br></pre></td></tr></table></figure></blockquote><h2 id="更新路由配置"><a href="#更新路由配置" class="headerlink" title="更新路由配置"></a>更新路由配置</h2><p>在你的应用中创建 routing.py 设置 WebSocket 路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .consumers <span class="keyword">import</span> ProgressConsumer</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;temperature&#x27;</span>, ProgressConsumer.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="配置Channels"><a href="#配置Channels" class="headerlink" title="配置Channels"></a>配置Channels</h2><p>在 settings.py 中添加 Channels 配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;channels&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;HelloWorld.asgi.application&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="更新ASGI文件"><a href="#更新ASGI文件" class="headerlink" title="更新ASGI文件"></a>更新ASGI文件</h2><p>更新  asgi.py 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> channels.auth <span class="keyword">import</span> AuthMiddlewareStack</span><br><span class="line"><span class="keyword">from</span> HelloWorld.routing <span class="keyword">import</span> websocket_urlpatterns</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;HelloWorld.settings&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># application = get_asgi_application()</span></span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: get_asgi_application(),</span><br><span class="line">    <span class="string">&quot;websocket&quot;</span>: AuthMiddlewareStack(</span><br><span class="line">        URLRouter(</span><br><span class="line">            websocket_urlpatterns</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><p>启动后看到下面这样的就说明成功了：</p><p><img src="https://raw.githubusercontent.com/Nampuchain/ImageHost/main/Django/3.jpg?token=AWGBYU25F4MFEO6AI2M55PDHC6KLI"></p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>在上面的例子中，服务器向前端推送消息的实现逻辑是开一个 while True 循环检测。但在实际应用中发现，服务器会卡在这个 while 循环中，以至于无法收到任何 http 请求。</p><p>那么开一个线程来执行这个 while True 循环？不，依然不行，这样又麻烦又乱，又是异步又是线程，一会儿又要异步转同步。为什么不使用封装的思想，在 consumers 类中封装一个 send 方法，当需要向前端推送消息的时候，调用这个 send 方法即可？</p><p>确实可以，使用 Channel Layer。</p><p>Channels 引入了 Channel Layer 的概念，它是一个用于不同消费者之间进行通信的后端系统（如 Redis），也可与外部 Django 程序实现互通。</p><p>多个 Channel 可以组成一个 Group，每个 Group 都有一个名称。任何拥有该名称的 Channel 都可以加入或退出该 Group，并向 Group 发送消息。Group 内的所有 Channel 都会接收到这些消息，但无法向 Group 内的具体某个 Channel 发送消息。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py 添加</span></span><br><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;channels.layers.InMemoryChannelLayer&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># consumers.py 修改</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressConsumer</span>(<span class="title class_ inherited__">AsyncWebsocketConsumer</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">await</span> self.channel_layer.group_add(<span class="string">&#x27;progress_group&#x27;</span>, self.channel_name)</span><br><span class="line">        <span class="keyword">await</span> self.accept()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code</span>):</span><br><span class="line">        <span class="keyword">await</span> self.channel_layer.group_discard(<span class="string">&#x27;progress_group&#x27;</span>, self.channel_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_progress_update</span>(<span class="params">self, progress</span>):</span><br><span class="line">        <span class="keyword">await</span> self.send(text_data=json.dumps(&#123;</span><br><span class="line">            <span class="string">&#x27;progress&#x27;</span>: progress</span><br><span class="line">        &#125;))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 需要向前端推送消息时</span></span><br><span class="line"><span class="keyword">from</span> channels.layers <span class="keyword">import</span> get_channel_layer</span><br><span class="line"><span class="keyword">from</span> asgiref.sync <span class="keyword">import</span> async_to_sync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前的 Channel Layer 实例</span></span><br><span class="line">channel_layer = get_channel_layer()</span><br><span class="line"><span class="comment"># async_to_sync() 用于在同步代码中调用异步代码</span></span><br><span class="line">async_to_sync(channel_layer.group_send)(</span><br><span class="line">    <span class="comment"># 组名</span></span><br><span class="line">    <span class="string">&#x27;progress_group&#x27;</span>,</span><br><span class="line">    <span class="comment"># 消息</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 指定消息的类型，用于消费者处理消息时执行哪个处理方法</span></span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send_progress_update&#x27;</span>,</span><br><span class="line">        <span class="comment"># 消息内容</span></span><br><span class="line">        <span class="string">&#x27;progress&#x27;</span>: <span class="string">&#x27;这是推送消息&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>官方推荐使用 Redis 作为 Channel Layer，如果没有使用 Redis，可以使用默认的 Channel Layer，这通常是基于内存的，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CHANNEL_LAYERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;channels.layers.InMemoryChannelLayer&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p><strong>1、安装依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure><p><strong>2、添加配置</strong></p><p>修改 settings.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>, <span class="comment">#必须放这里</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_HEADERS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果还不行，多半是因为 CSRF 的问题。</p><p>在前后端分离的项目中，我们不能保证前端一定加入了 CSRF 功能。如果没加，那只能我们在视图中禁用 CSRF：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>多半用在登录、注销、表单提交中。</p><h1 id="启动时执行"><a href="#启动时执行" class="headerlink" title="启动时执行"></a>启动时执行</h1><p>方法很多，一种简单无脑的方法是：</p><p>Django 2.1 及以上时， views.py 会在 Django 启动的时候执行一次，所以我们直接把 function_run() 丢在 views.py 中即可实现”开机自启动“。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Django 本身基于 MVC 的设计模式。&lt;/p&gt;
&lt;p&gt;安装：&lt;code&gt;pip install Django&lt;/code&gt; ，测试是否</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>New Life</title>
    <link href="http://example.com/2024/10/10/New%20Life/"/>
    <id>http://example.com/2024/10/10/New%20Life/</id>
    <published>2024-10-09T16:00:00.000Z</published>
    <updated>2024-10-22T11:47:36.149Z</updated>
    
    <content type="html"><![CDATA[<p>时光荏苒，不想三年就这样过去了，所幸已经上岸，再续三年。</p><p>大学的前三年，热血沸腾，势必要在安全行业干出一番天地。结果到了投简历的时候，岗位寥寥无几，自己的技术也是半桶水的。找个实习，还是不得不接受安全的工资干不过开发的事实。hr 消息已读不回，聊上的岗位是两班倒看设备，要求却写着“熟悉 XXX ，有 CTF 或渗透测试经验优先”。</p><p>自己埋头苦干学了三年，迷茫过、怀疑过，却始终坚定、始终相信、始终热血。自知能力不够，总想着的“进修”却时时没有推进，曾经热血规划的蓝图也没有开始几笔。想着研究生一定好好干，这次一定要在安全行业真真正正干出一片天地。结果西电拒、北邮拒、山大拒、东南拒、哈工大拒、北交拒、中海洋也拒，西工大拒、信工所拒、中大拒……拒到最后，也总算有入的了，幻想着一定要组队打 CTF ，继续难凉热血。结果，一堆鸽子，最后来的寥寥无几，来也是因为好上岸，哪有什么对安全的热爱，连面试前信誓旦旦“我一定来，咱俩组队打 CTF ”的哥们，最后自己也没来。</p><p>罢了吧，没有一个好的本科经历，也不可能再有第二次的机会了，他们都只想要有经验的人。</p><p>算了吧，别再讨论什么反弹 shell 、什么挂马免杀、什么 fuzz 爆破、花里胡哨的绕过……也再见了什么 BUUCTF 、什么 NSSCTF 、什么 shodan 、什么 ZoomEye ……删掉那一堆工具吧，也别再幻想什么黑客梦，幻想在 CTF 赛场大放光彩，幻想“明年一定参加 hvv ”……</p><p>尘封吧，那段精彩的、怀揣梦想的、不愿服输的岁月，那些写过的笔记、做过的题，那颗“幻想成为高手”的心。把接下来的日子，好好交给业务，踏踏实实干回开发吧。</p><p>无限进步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时光荏苒，不想三年就这样过去了，所幸已经上岸，再续三年。&lt;/p&gt;
&lt;p&gt;大学的前三年，热血沸腾，势必要在安全行业干出一番天地。结果到了投简历的时候，岗位寥寥无几，自己的技术也是半桶水的。找个实习，还是不得不接受安全的工资干不过开发的事实。hr 消息已读不回，聊上的岗位是两班</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/10/HelloWorld/"/>
    <id>http://example.com/2023/12/10/HelloWorld/</id>
    <published>2023-12-09T16:00:00.000Z</published>
    <updated>2024-10-22T11:47:51.248Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, World !</p><p>这是我的第一篇博客，从今天开始就一起探索未知的世界吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello, World !&lt;/p&gt;
&lt;p&gt;这是我的第一篇博客，从今天开始就一起探索未知的世界吧！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
